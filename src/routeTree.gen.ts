/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ScheduleRouteImport } from './routes/schedule'
import { Route as PricesRouteImport } from './routes/prices'
import { Route as LocationsRouteImport } from './routes/locations'
import { Route as CoursesRouteImport } from './routes/courses'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as IndexRouteImport } from './routes/index'

const ScheduleRoute = ScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => rootRouteImport,
} as any)
const PricesRoute = PricesRouteImport.update({
  id: '/prices',
  path: '/prices',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsRoute = LocationsRouteImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesRoute = CoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/courses': typeof CoursesRoute
  '/locations': typeof LocationsRoute
  '/prices': typeof PricesRoute
  '/schedule': typeof ScheduleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/courses': typeof CoursesRoute
  '/locations': typeof LocationsRoute
  '/prices': typeof PricesRoute
  '/schedule': typeof ScheduleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/courses': typeof CoursesRoute
  '/locations': typeof LocationsRoute
  '/prices': typeof PricesRoute
  '/schedule': typeof ScheduleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/courses'
    | '/locations'
    | '/prices'
    | '/schedule'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contact' | '/courses' | '/locations' | '/prices' | '/schedule'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/courses'
    | '/locations'
    | '/prices'
    | '/schedule'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRoute: typeof ContactRoute
  CoursesRoute: typeof CoursesRoute
  LocationsRoute: typeof LocationsRoute
  PricesRoute: typeof PricesRoute
  ScheduleRoute: typeof ScheduleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/schedule': {
      id: '/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof ScheduleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/prices': {
      id: '/prices'
      path: '/prices'
      fullPath: '/prices'
      preLoaderRoute: typeof PricesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations': {
      id: '/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses': {
      id: '/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRoute: ContactRoute,
  CoursesRoute: CoursesRoute,
  LocationsRoute: LocationsRoute,
  PricesRoute: PricesRoute,
  ScheduleRoute: ScheduleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
